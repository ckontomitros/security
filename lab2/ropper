===========================================================================
 * ROP gadgets generated by ROPEME * 
===========================================================================
 + Binary info
---------------------------------------------------------------------------
hash: b0fd71cf393828f28a6070dc7e7fb9ec
name: retlib
arch: x86_64
type: RAW
base address: 0x0
code size: 8784
code offset: 0x0
gadget depth: 6
gadget count: 63
---------------------------------------------------------------------------
 + Unique gadgets: (offset : instructions)
---------------------------------------------------------------------------
0x00000489 : ret
0x00000555 : jmp rax
0x000005ee : call rax
0x0000081b : jmp [rbp]
0x000007b3 : jmp [rax]
0x00000624 : leave ; ret
0x00000560 : pop rbp; ret
0x000006e2 : pop r15; ret
0x000006e3 : pop rdi; ret
0x00000486 : add esp, 8; ret
0x000006ef : add bl, dh; ret
0x00000485 : add rsp, 8; ret
0x00000623 : add cl, cl; ret
0x000005c9 : add ebx, esi; ret
0x000005f5 : call [rbp + 0x48]
0x000006c9 : call [r12 + rbx*8]
0x000006e1 : pop rsi; pop r15; ret
0x000006e0 : pop r14; pop r15; ret
0x000005eb : mov rbp, rsp; call rax
0x000005ec : mov ebp, esp; call rax
0x00000552 : adc [rax], ah; jmp rax
0x0000061f : mov eax, 1; leave ; ret
0x000006ee : add [rax], al; rep ; ret
0x000005c8 : add [rcx], al; rep ; ret
0x00000550 : mov edi, 0x601050; jmp rax
0x00000622 : add [rax], al; leave ; ret
0x000006f5 : sub esp, 8; add rsp, 8; ret
0x0000055e : add [rax], al; pop rbp; ret
0x000006f4 : sub rsp, 8; add rsp, 8; ret
0x00000621 : add [rax], al; add cl, cl; ret
0x000006ed : add [rax], al; add bl, dh; ret
0x00000483 : add [rax], al; add rsp, 8; ret
0x000006df : pop rbp; pop r14; pop r15; ret
0x000006de : pop r13; pop r14; pop r15; ret
0x00000551 : push rax; adc [rax], ah; jmp rax
0x000006c7 : mov edi, edi; call [r12 + rbx*8]
0x000005ea : push rbp; mov rbp, rsp; call rax
0x000006c6 : mov edi, r15d; call [r12 + rbx*8]
0x000005c3 : mov [rip + 0x200a86], 1; rep ; ret
0x0000054f : pop rbp; mov edi, 0x601050; jmp rax
0x000006ec : add [rax], al; add [rax], al; rep ; ret
0x000006dd : pop rsp; pop r13; pop r14; pop r15; ret
0x000006dc : pop r12; pop r13; pop r14; pop r15; ret
0x000005e9 : int1 ; push rbp; mov rbp, rsp; call rax
0x00000620 : add [rax], eax; add [rax], al; leave ; ret
0x000006f2 : add [rax], al; sub rsp, 8; add rsp, 8; ret
0x0000055c : add [rax], al; add [rax], al; pop rbp; ret
0x000005c2 : pop rbp; mov [rip + 0x200a86], 1; rep ; ret
0x000006eb : add [rax], al; add [rax], al; add bl, dh; ret
0x000006c3 : mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
0x000006c4 : mov esi, esi; mov edi, r15d; call [r12 + rbx*8]
0x000006db : pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x000005c5 : xchg [rdx], cl; and [rax], al; add ebx, esi; ret
0x0000054e : adc [rbp - 0x41], ebx; push rax; adc [rax], ah; jmp rax
0x000006da : pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x000006c0 : mov rdx, r13; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
0x000006c1 : mov edx, ebp; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
0x000006be : add [rax], al; mov rdx, r13; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
0x000006bf : add [rcx + rcx*4 - 0x16], cl; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
0x000006bc : add [rax], al; add [rax], al; mov rdx, r13; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
0x000006b6 : xor ebx, ebx; nop [rax + rax]; mov rdx, r13; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
0x000006bd : add [rax], al; add [rcx + rcx*4 - 0x16], cl; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
0x000006bb : add [rax], al; add [rax], al; add [rcx + rcx*4 - 0x16], cl; mov rsi, r14; mov edi, r15d; call [r12 + rbx*8]
